#!/usr/bin/env ruby
# encoding: utf-8

require 'yaml'

CHART_YAML= <%= p('charts') %>


CHART_YAML_TEST= <<~YAML
---
- name: mygrafana
  chart: stable/grafana
  namespace: default
  properties:
  - name: service.type
    value: ClusterIP
  - name: service.port
    value: 9000
- name: mygrafana2
  chart: stable/grafana
  properties:
  - name: service.type
    value: ClusterIP
  - name: service.port
    value: 9001
  - name: service.test
    value: 9002
YAML



data = CHART_YAML



data.each { |chart|
    t= ""
    count=0
    pnamespace = chart['namespace']
    pproperties = chart['properties']
    pversion = chart['version']
    pdebug = chart['debug']
    pfile = chart['values']
    if (pproperties != nil)
     chart['properties'].each{ |property|
     pname = property['name']
     pvalue = property['value']
     t= "#{t} --set #{pname}=#{pvalue}"
    }
    end

    ispresent = `helm list #{chart['name']}| wc -l `.strip

    cmdinit= "export HELM_HOME=/var/vcap/store/helm/"
    cmdinit= "#{cmdinit}; export KUBECONFIG=/var/vcap/jobs/helm/config/kubeconfig"
    system("#{cmdinit};helm init --upgrade --wait --service-account tiller ")


    cmdUpgrade = "#{cmdinit};helm upgrade --install "

    unless pdebug.nil? || pdebug == 0
            cmdUpgrade = "#{cmdUpgrade} --debug"
    end

    unless pversion.nil? || pversion == 0
        cmdUpgrade = "#{cmdUpgrade} --version=#{pversion}"
    end

    unless pnamespace.nil? || pnamespace == 0
        cmdUpgrade = "#{cmdUpgrade} --namespace #{pnamespace}"
    end

    cmdUpgrade ="#{cmdUpgrade} #{chart['name']} #{chart['chart']} #{t}"

    unless pfile .nil? || pfile  == 0
        File.open("#{chart['name']}.yml", 'w') {|f| f.write pfile .to_yaml }
        cmdUpgrade = "#{cmdUpgrade} -f #{chart['name']}.yml"
    end

    puts "try to execute : #{cmdUpgrade}"
    puts "#{cmdUpgrade}"
    system(cmdUpgrade) or puts "ACTION FAILED"

}


