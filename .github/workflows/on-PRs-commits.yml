name: create-dev-release-on-PR

on:
  push:
    branches-ignore:
      - master
    tags-ignore:
      - '*'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0

      # TODO: add caching for cli downloads, see https://github.com/marketplace/actions/cache
      - name: Install bosh-cli
        #See https://github.com/marketplace/actions/install-a-binary-from-github-releases
        uses: jaxxstorm/action-install-gh-release@cd6b2b78ad38bdd294341cda064ec0692b06215b # v1.14.0
        with:
          repo: cloudfoundry/bosh-cli
          tag: v7.8.6
          extension-matching: disable
          chmod: 0755
          rename-to: bosh

          # searching for bosh-cli-7.4.0-linux-amd64 with (linux|x86_64|x64|amd64).*(linux|x86_64|x64|amd64).*.(tar.gz|zip)
          #               bosh-cli-7.4.0-linux-amd64

      - name: Install vendir cli
        #See https://github.com/marketplace/actions/install-a-binary-from-github-releases
        uses: jaxxstorm/action-install-gh-release@cd6b2b78ad38bdd294341cda064ec0692b06215b # v1.14.0
        with:
          repo: carvel-dev/vendir
          tag: v0.43.0
          extension-matching: disable
          chmod: 0755
          rename-to: vendir

      - name: Install yq cli
        #See https://github.com/marketplace/actions/install-a-binary-from-github-releases
        uses: jaxxstorm/action-install-gh-release@cd6b2b78ad38bdd294341cda064ec0692b06215b # v1.14.0
        with:
          repo: mikefarah/yq
          tag: v4.45.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # reduce potential rate limiting

      - name: vendor-add-blob
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_BOSH_ACCES_KEY_ID: ${{ secrets.AWS_BOSH_ACCES_KEY_ID }}
          AWS_BOSH_SECRET_ACCES_KEY: ${{ secrets.AWS_BOSH_SECRET_ACCES_KEY }}
        run: |
          #set -x # enable traces
          #pwd
          #find .
          # configure git
          git config --global user.name "workflows/k9s-package/create-final-bosh-release"
          git config --global user.email "<>"
          git config --global --add safe.directory /github/workspace
          export VENDIR_GITHUB_API_TOKEN="${GITHUB_TOKEN}"
          ./vendor.sh
          echo "State after vendir (src/github.com):"
          tree -s src/github.com
          ./addblob.sh dev-mode
          echo "Resulting State (src/github.com):" 
          tree -s src/github.com
          if [ -d blobs ];then # The blobs dir is only present when a blob is modified or has not yet been published.
            tree -s blobs
          fi
      - name: create bosh dev release
        id: create-bosh-release
        uses: orange-cloudfoundry/create-bosh-release-action@fd4ddefcec42563de953491bb56286f8db2e4862 # v1.1.0 # will create dev release when pushed git ref is not a tag
        with:
          target_branch: ${{github.ref_name}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_BOSH_ACCES_KEY_ID: ${{ secrets.AWS_BOSH_ACCES_KEY_ID }}
          AWS_BOSH_SECRET_ACCES_KEY: ${{ secrets.AWS_BOSH_SECRET_ACCES_KEY }}

      # See https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts
      # This creates a zip file containing the k3s-master.tgz file

      # See https://github.com/actions/upload-artifact#zipped-artifact-downloads
      # > There is currently no way to download artifacts after a workflow run finishes in a format other than a zip or
      # > to download artifact contents individually. One of the consequences of this limitation is that if a zip is
      # > uploaded during a workflow run and then downloaded from the UI, there will be a double zip created.
      - name: Archive bosh dev release tgz
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: helm-kubectl-dev-boshrelease-tgz
          path: |
            helm-*.tgz
