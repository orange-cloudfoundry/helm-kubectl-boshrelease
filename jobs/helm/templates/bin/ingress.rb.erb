#!/usr/bin/env ruby
# encoding: utf-8

require 'yaml'

INGRESS_YAML= <%= p('ingress') %>
MAX_RETRIES = 3
SLEEP_DURATION = 5
failCmd=[]

INGRESS_YAML_TEST= <<~YAML
- name: dashboard-ingress
  namespace: kube-system
  definition:
      spec:
        rules:
        - host: ingress-ops.nd-int-cfapi.itn.intraorange
          http:
            paths:
            - backend:
                serviceName: kubernetes-dashboard
                servicePort: 443
              path: /dashboard

- name: grafana-ingress
  namespace: kube-system
  annotations:
  - name: nginx.ingress.kubernetes.io/rewrite-target
    value: '/'
  - name: nginx.ingress.kubernetes.io/secure-backends
    value : '"true"'

  definition:
    spec:
      rules:
      - host: ingress-ops.nd-int-cfapi.itn.intraorange
        http:
          paths:
          - backend:
              serviceName: grafana
              servicePort: 443
            path: /grafana

YAML


data = INGRESS_YAML
#data = YAML.load(INGRESS_YAML_TEST)

pclass= "<%= p('ingress_class') %>"
data.each { |ingress|
    pnamespace = ingress['namespace']
    pname = ingress['name']
    pspec = ingress['definition']
    pannotations =ingress['annotations']
    pfilename="/tmp/#{pname}.yml"

    File.open(pfilename, 'w+') do |f|
          f.puts("#{pspec.to_yaml}")
    end
    input_lines = File.readlines(pfilename)
    input_lines[0]=""

    File.delete(pfilename)

    File.open(pfilename, 'w+') do |f|
      f.puts("apiVersion: extensions/v1beta1")
      f.puts("kind: Ingress")
      f.puts("metadata:")
      f.puts("  name: #{pname}")
      f.puts("  namespace: #{pnamespace}")
      f.puts("  annotations:")
      f.puts("    kubernetes.io/ingress.class: #{pclass}")
      if (pannotations != nil)
           pannotations.each{ |annotation|
            f.puts("    #{annotation['name']}: #{annotation['value']}")
           }
      end
      input_lines.each { |line|
        f.puts("#{line}")
        }
    end
    cmd = "kubectl apply -f #{pfilename} "
     # Begin the retryable operation
     retry_count = 0
     begin
       result=system("#{cmd} > /dev/null 2>&1")
       while !result && retry_count < MAX_RETRIES
         retry_count += 1
         sleep SLEEP_DURATION
         puts "retry #{retry_count}"
         result=system("#{cmd} > /dev/null 2>&1")
       end
       if !result
         failCmd.push("#{cmd}")
         puts "ACTION delayed after all commands: #{cmd}"
       end
       if result
          puts "ACTION SUCCESS: #{cmd}"
       end
     end

 }
 isOnFail=false
puts "============================="
puts " Retry unsuccessful ingress"
puts "============================="
puts ""
 failCmd.each { |cmd|
   result=system("#{cmd} > /dev/null")
         if !result
           puts "ACTION FAILED: #{cmd}"
           isOnFail=true
         end
         if result
            puts "ACTION SUCCESS: #{cmd}"
         end
 }
 if (isOnFail)
     fail("some action cannot be performed")
 end
puts "============================="
puts " Ingress done"




