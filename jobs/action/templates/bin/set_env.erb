#!/bin/bash
set -e
ASSERT_GEM_VERSION=3.1.2
source "/var/vcap/packages/action/bosh/runtime.env"

export PATH=$PATH:/var/vcap/packages/ruby-2.6.5-r0.29.0/bin/
gems_version=$(bundle exec gem -v)


if [[ $gems_version == *"$ASSERT_GEM_VERSION"* ]]; then
  echo "found correct rubygems version $gems_version"
else
  echo "wrong rubygems version: $gems_version"
  exit 1
fi
export GEM_PATH=$GEM_PATH:/var/vcap/packages/action/gem_home/ruby/2.6.0/

export http_proxy=<%= p('proxy.http') %>
export HTTP_PROXY=<%= p('proxy.http') %>
export https_proxy=<%= p('proxy.https') %>
export HTTPS_PROXY=<%= p('proxy.https') %>
export no_proxy=<%= p('proxy.noproxy') %>
export NO_PROXY=<%= p('proxy.noproxy') %>

export KUBECONFIG=/var/vcap/jobs/action/config/kubeconfig
export PATH=$PATH:/var/vcap/packages/helm/linux-amd64/
export PATH=$PATH:/var/vcap/packages/kubectl/
export HELM_HOME=/var/vcap/store/helm/

mkdir -p /var/vcap/store/helm/

endpoint=<%= p('kubernetes.host') %>
port=<%= p('kubernetes.port') %>
config=<%= p('config') %>
config_path=<%= p('kubernetes.config_path') %>

certificate_authority = ""
<% if_p("kubernetes.cluster_ca_certificate") do |prop| %>
    certificate_authority = "--certificate-authority=\"/var/vcap/jobs/action/config/ca_cert.pem\" --embed-certs=true"
<% end %>


insecure=<%= p('kubernetes.insecure_skip_tls_verify') %>

case ${config} in

path_config_file )
  cp ${config_path} /var/vcap/jobs/action/config/kubeconfig
  kubectl config use-context "<%= p('kubernetes.usecontext') %>"
  ;;

provided_config )
  cp /var/vcap/jobs/action/config/config /var/vcap/jobs/action/config/kubeconfig
  kubectl config use-context "<%= p('kubernetes.usecontext') %>"
  ;;

token )
  address="https://${endpoint}:${port}"
  kubectl config set-cluster "cfcr" --server="${address}" ${certificate_authority}  --insecure-skip-tls-verify=${insecure}
  kubectl config set-credentials "admin" --token="<%= p('kubernetes.password') %>"
  kubectl config set-context "cfcr" --cluster="cfcr" --user="admin"
  kubectl config use-context "cfcr"
  ;;

certificate )
  address="https://${endpoint}:${port}"
  kubectl config set-cluster "cfcr" --server="${address}" ${certificate_authority} --insecure-skip-tls-verify=${insecure}
  kubectl config set-credentials "admin" --client-key /var/vcap/jobs/action/config/client-key.pem --client-certificate /var/vcap/jobs/action/config/client-certificate.pem --embed-certs
  kubectl config set-context "cfcr" --cluster="cfcr" --user="admin"
  kubectl config use-context "cfcr"
  ;;
esac



