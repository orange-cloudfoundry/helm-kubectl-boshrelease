#!/usr/bin/env ruby
# encoding: utf-8

require 'yaml'

CHART_YAML= <%= p('charts') %>
MAX_RETRIES = 3
SLEEP_DURATION = 5
failCmd=[]

CHART_YAML_TEST= <<~YAML
---
- name: mygrafana
  chart: stable/grafana
  namespace: default
  properties:
  - name: service.type
    value: ClusterIP
  - name: service.port
    value: 9000
- name: mygrafana2
  chart: stable/grafana
  properties:
  - name: service.type
    value: ClusterIP
  - name: service.port
    value: 9001
  - name: service.test
    value: 9002
YAML


cmdinit= "export HELM_HOME=/var/vcap/store/helm/"
cmdinit= "#{cmdinit}; export KUBECONFIG=/var/vcap/jobs/helm/config/kubeconfig"
system("#{cmdinit};helm init --upgrade --wait --service-account tiller ")

data = CHART_YAML



data.each { |chart|
    t= ""
    count=0
    pnamespace = chart['namespace']
    pproperties = chart['properties']
    pversion = chart['version']
    pdebug = chart['debug']
    pfile = chart['values']
    pfiles = chart['files']

    if (pproperties != nil)
     pproperties.each{ |property|
     if (property != nil)
      pname = property['name']
      pvalue = property['value']
      t= "#{t} --set #{pname}=#{pvalue}"
     end
    }
    end



    cmdUpgrade = "helm upgrade --install "

    unless pdebug.nil? || pdebug == 0
            cmdUpgrade = "#{cmdUpgrade} --debug"
    end

    unless pversion.nil? || pversion == 0
        cmdUpgrade = "#{cmdUpgrade} --version=#{pversion}"
    end

    unless pnamespace.nil? || pnamespace == 0
        cmdUpgrade = "#{cmdUpgrade} --namespace #{pnamespace}"
    end

    cmdUpgrade ="#{cmdUpgrade} #{chart['name']} #{chart['chart']} #{t}"

    unless pfile .nil? || pfile  == 0
        File.open("#{chart['name']}.yml", 'w') {|f| f.write pfile .to_yaml }
        cmdUpgrade = "#{cmdUpgrade} -f #{chart['name']}.yml"
        unless pfiles .nil? || pfiles == 0
            pfiles.each {|file|
            cmdUpgrade = "#{cmdUpgrade} -f #{file['url']}"
            }
        end
    end

    # Begin the retryable operation
    retry_count = 0
    begin
      result=system("#{cmdUpgrade} > /dev/null 2> #{chart['name']}_err.txt")
      if !result
          puts "first try failed: #{cmdUpgrade}"
          system("cat #{chart['name']}_err.txt")
      end
      while !result && retry_count < MAX_RETRIES
        retry_count += 1
        sleep SLEEP_DURATION
        puts "retry #{retry_count}"
        result=system("#{cmdUpgrade} > /dev/null 2>&1")
      end
      if !result
        failCmd.push("#{cmdUpgrade}")
        puts "ACTION delayed after all commands: #{cmdUpgrade}"
        puts "============================="

        unless pfile .nil? || pfile  == 0
            puts("#{chart['name']}.yml:")
            system("cat #{chart['name']}.yml")
        end
      end
      if result
         puts "ACTION SUCCESS: #{cmdUpgrade}"
      end
    end

}
puts "============================="
puts " Retry unsuccessful charts"
puts "============================="
puts ""

isOnFail=false
failCmd.each { |cmdUpgrade|
        result=system("#{cmdUpgrade} > /dev/null")
        if !result
          puts "ACTION FAILED: #{cmdUpgrade}"
          isOnFail=true
        end
        if result
           puts "ACTION SUCCESS: #{cmdUpgrade}"
        end
}
if (isOnFail)
    fail("some action cannot be performed")
end
puts "============================="
puts " Charts done"
